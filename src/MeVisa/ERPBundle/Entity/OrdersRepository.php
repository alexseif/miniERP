<?php

namespace MeVisa\ERPBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * OrdersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrdersRepository extends EntityRepository
{

    public function find($id)
    {
        return $this->createQueryBuilder('o')
                        ->select('o, c, op, oc, opa, od, oco, i')
                        ->leftJoin('o.customer', 'c')
                        ->leftJoin('o.orderProducts', 'op')
                        ->leftJoin('o.orderCompanions', 'oc')
                        ->leftJoin('o.orderPayments', 'opa')
                        ->leftJoin('o.orderDocuments', 'od')
                        ->leftJoin('o.orderComments', 'oco')
                        ->leftJoin('o.invoices', 'i')
                        ->where("o.id = ?1")
                        ->setParameter('1', $id)
                        ->getQuery()
                        ->getOneOrNullResult();
    }

    public function findAll()
    {
        return $this->createQueryBuilder('o')
                        ->select('o, c, opa')
                        ->leftJoin('o.customer', 'c')
                        ->leftJoin('o.orderPayments', 'opa')
                        ->orderBy("o.createdAt, o.wcId")
                        ->getQuery()
                        ->getResult();
    }

    public function findAllByState($state)
    {
        return $this->createQueryBuilder('o')
                        ->select('o, c, opa')
                        ->leftJoin('o.customer', 'c')
                        ->leftJoin('o.orderPayments', 'opa')
                        ->where("o.state = ?1")
                        ->andWhere("opa.state = 'paid'")
                        ->setParameter('1', $state)
                        ->orderBy("o.createdAt, o.wcId")
                        ->getQuery()
                        ->getResult();
    }

    public function findAllComplete()
    {
        return $this->createQueryBuilder('o')
                        ->select('o, c')
                        ->leftJoin('o.customer', 'c')
                        ->Where("DATE_DIFF(o.completedAt, CURRENT_DATE()) = 0")
                        ->orderBy("o.createdAt, o.wcId")
                        ->getQuery()
                        ->getResult();
    }

    public function findAllPending()
    {
        return $this->createQueryBuilder('o')
                        ->select('o, c')
                        ->leftJoin('o.customer', 'c')
                        ->where("o.state = ?1")
                        ->orWhere("o.state = ?2")
                        ->setParameter('1', 'pending')
                        ->setParameter('2', 'processing')
                        ->orderBy("o.createdAt, o.wcId")
                        ->getQuery()
                        ->getResult();
    }

    public function queryLastPOSOrder()
    {
        return $this->createQueryBuilder("o")
                        ->where("o.number LIKE 'POS%'")
                        ->orderBy("o.id", "DESC")
                        ->setMaxResults(1)
                        ->getQuery()
                        ->getOneOrNullResult();
    }

    public function searchQuery($text)
    {

        return $this->createQueryBuilder("o")
                        ->select('o, c')
                        ->leftJoin("o.customer", 'c')
                        ->leftJoin("o.orderCompanions", 'oc')
                        ->where("c.name LIKE ?1")
                        ->orWhere("c.name LIKE ?1")
                        ->orWhere("o.number LIKE ?1")
                        ->orWhere("c.phone LIKE ?1")
                        ->orWhere("c.email LIKE ?1")
                        ->orWhere("oc.name LIKE ?1")
                        ->orWhere("oc.passportNumber LIKE ?1")
                        ->setParameter("1", "%" . $text . "%")
                        ->getQuery()
                        ->getResult();
    }

    public function findWC()
    {
        return $this->createQueryBuilder("o")
                        ->where("o.wcId is not null")
                        ->getQuery()
                        ->getResult();
    }

}
